
data.dir = ./data
tmp.dir = /tmp

mapdb.dir = mapdb
mapdb.commit = 1000

lucene.index = lucene

 
spot.commonness.threshold = 0.005
spot.probability.threshold = 0.02



#number of entities in the collection
w = 4700000

#relatedness function
relatedness=milne

#how many words consider around the spot
context.window.size = 50

incoming.nodes = ./data/graph/incoming-edges.tsv.gz
outcoming.nodes = ./data/graph/outcoming-edges.tsv.gz

ram.incoming.nodes = ./data/graph/incoming-edges.bin
ram.outcoming.nodes = ./data/graph/outcoming-edges.bin

# use the context text to rank the entities (affects performance)
rank.by.similarity = false
# use the prior probability (e|s) aka commonness to rank the entities 
rank.by.prior = true

lucene.wiki.id = wiki2lucene-map.bin

# type of the spot repository [mapfile|mapdb]
spot.repository=ram
relatedness.cache.size=5000
spotter.cache.size=10000

prior.threshold=0.03

# where to store the minimal perfect hash function for spots
ram.spot.hash.values = ./data/spot/ram/spot-hashes.gz

ram.spot.perfect.hash = ./data/spot/ram/minimal-perfect-hash.bin
ram.spot.offsets = ./data/spot/ram/offsets.gz
ram.spot.offsets.ef = ./data/spot/ram/offsets.eliasfano.bin
ram.spot.data.bin = ./data/spot/ram/spots.bin

wikiminer.classifier = ./data/wikiminer/model.arff

spots = ./data/spot/spots.tsv.gz


# disambiguator.class=it.cnr.isti.hpc.tagme.Tagme
# tagme.window.size=30
# tagme.epsilon=0.7


